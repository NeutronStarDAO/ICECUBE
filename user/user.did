type CanisterStatusResponse = record {
  status : CanisterStatusType;
  memory_size : nat;
  cycles : nat;
  settings : DefiniteCanisterSettings;
  query_stats : QueryStats;
  idle_cycles_burned_per_day : nat;
  module_hash : opt blob;
  reserved_cycles : nat;
};
type CanisterStatusType = variant { stopped; stopping; running };
type DefiniteCanisterSettings = record {
  freezing_threshold : nat;
  controllers : vec principal;
  reserved_cycles_limit : nat;
  wasm_memory_limit : nat;
  memory_allocation : nat;
  compute_allocation : nat;
};
type Profile = record {
  id : principal;
  avatar_url : text;
  name : text;
  biography : text;
  created_at : opt nat64;
  website : text;
  feed_canister : opt principal;
  handle : text;
  location : text;
  back_img_url : text;
};
type QueryStats = record {
  response_payload_bytes_total : nat;
  num_instructions_total : nat;
  num_calls_total : nat;
  request_payload_bytes_total : nat;
};
service : {
  add_black_list : (principal) -> (bool);
  batch_get_profile : (vec principal) -> (vec Profile) query;
  cancle_black_list : (principal) -> (bool);
  cancle_follow : (principal) -> ();
  create_profile : (Profile) -> (bool);
  follow : (principal) -> ();
  get_follower_number : (principal) -> (nat64) query;
  get_followers_list : (principal) -> (vec principal) query;
  get_following_list : (principal) -> (vec principal) query;
  get_following_number : (principal) -> (nat64) query;
  get_profile : (principal) -> (opt Profile) query;
  is_black_follow_list : (principal, principal) -> (bool) query;
  is_followed : (principal, principal) -> (bool) query;
  is_handle_available : (text) -> (bool) query;
  status : () -> (CanisterStatusResponse);
  update_handle : (text) -> (bool);
  update_profile : (Profile) -> ();
}
