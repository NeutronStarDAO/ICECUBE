type Account = record { owner : principal; subaccount : opt blob };
type AllowanceArgs = record { account : Account; spender : Account };
type ApproveArgs = record {
  fee : opt nat;
  memo : opt blob;
  from_subaccount : opt blob;
  created_at_time : opt nat64;
  amount : nat;
  expected_allowance : opt nat;
  expires_at : opt nat64;
  spender : Account;
};
type ApproveError = variant {
  GenericError : record { message : text; error_code : nat };
  TemporarilyUnavailable;
  Duplicate : record { duplicate_of : nat };
  BadFee : record { expected_fee : nat };
  AllowanceChanged : record { current_allowance : nat };
  CreatedInFuture : record { ledger_time : nat64 };
  TooOld;
  Expired : record { ledger_time : nat64 };
  InsufficientFunds : record { balance : nat };
};
type Icrc1supportedStandardsResult = record { url : text; name : text };
type Icrc1transferResult = variant { Ok : nat; Err : TransferError };
type Icrc2allowanceResult = record { allowance : nat; expires_at : opt nat64 };
type Icrc2approveResult = variant { Ok : nat; Err : ApproveError };
type Icrc2transferFromResult = variant { Ok : nat; Err : TransferFromError };
type Result = variant { Ok : nat64; Err : TokenError };
type Result_1 = variant { Ok : nat; Err : TokenError };
type Result_10 = variant { Ok : Icrc2transferFromResult; Err : TokenError };
type Result_2 = variant { Ok : nat8; Err : TokenError };
type Result_3 = variant { Ok : vec record { text; Value }; Err : TokenError };
type Result_4 = variant { Ok : opt Account; Err : TokenError };
type Result_5 = variant { Ok : text; Err : TokenError };
type Result_6 = variant {
  Ok : vec Icrc1supportedStandardsResult;
  Err : TokenError;
};
type Result_7 = variant { Ok : Icrc1transferResult; Err : TokenError };
type Result_8 = variant { Ok : Icrc2allowanceResult; Err : TokenError };
type Result_9 = variant { Ok : Icrc2approveResult; Err : TokenError };
type TokenError = variant { Unauthorized; TokenNotExist };
type TokenInitArgs = record {
  fee : nat;
  decimals : nat8;
  init_balances : vec record { principal; nat };
  name : text;
  symbol : text;
  mintint_account : opt Account;
};
type TransferArgs = record {
  to : Account;
  fee : opt nat;
  memo : opt blob;
  from_subaccount : opt blob;
  created_at_time : opt nat64;
  amount : nat;
};
type TransferError = variant {
  GenericError : record { message : text; error_code : nat };
  TemporarilyUnavailable;
  BadBurn : record { min_burn_amount : nat };
  Duplicate : record { duplicate_of : nat };
  BadFee : record { expected_fee : nat };
  CreatedInFuture : record { ledger_time : nat64 };
  TooOld;
  InsufficientFunds : record { balance : nat };
};
type TransferFromArgs = record {
  to : Account;
  fee : opt nat;
  spender_subaccount : opt blob;
  from : Account;
  memo : opt blob;
  created_at_time : opt nat64;
  amount : nat;
};
type TransferFromError = variant {
  GenericError : record { message : text; error_code : nat };
  TemporarilyUnavailable;
  InsufficientAllowance : record { allowance : nat };
  BadBurn : record { min_burn_amount : nat };
  Duplicate : record { duplicate_of : nat };
  BadFee : record { expected_fee : nat };
  CreatedInFuture : record { ledger_time : nat64 };
  TooOld;
  InsufficientFunds : record { balance : nat };
};
type Value = variant { Int : int; Nat : nat; Blob : blob; Text : text };
service : {
  burn : (nat64, principal, nat64) -> (bool);
  create : (TokenInitArgs) -> (Result);
  get_holders : (nat64) -> (vec record { principal; nat }) query;
  icrc1_balance_of : (nat64, Account) -> (Result_1) query;
  icrc1_decimals : (nat64) -> (Result_2) query;
  icrc1_fee : (nat64) -> (Result_1) query;
  icrc1_metadata : (nat64) -> (Result_3) query;
  icrc1_minting_account : (nat64) -> (Result_4) query;
  icrc1_name : (nat64) -> (Result_5) query;
  icrc1_supported_standards : (nat64) -> (Result_6) query;
  icrc1_symbol : (nat64) -> (Result_5) query;
  icrc1_total_supply : (nat64) -> (Result_1) query;
  icrc1_transfer : (nat64, TransferArgs) -> (Result_7);
  icrc2_allowance : (nat64, AllowanceArgs) -> (Result_8) query;
  icrc2_approve : (nat64, ApproveArgs) -> (Result_9);
  icrc2_transfer_from : (nat64, TransferFromArgs) -> (Result_10);
  mint : (nat64, principal, nat64) -> (bool);
}
